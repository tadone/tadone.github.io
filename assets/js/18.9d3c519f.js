(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{182:function(t,e,a){"use strict";a.r(e);var r=a(0),s=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"kubectl-kubernetes-cheatsheet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubectl-kubernetes-cheatsheet","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubectl Kubernetes CheatSheet")]),t._v(" "),a("h2",{attrs:{id:"common-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#common-commands","aria-hidden":"true"}},[t._v("#")]),t._v(" Common Commands")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List everything")]),t._v(" "),a("td",[a("code",[t._v("kubectl get all --all-namespaces")])])]),t._v(" "),a("tr",[a("td",[t._v("List pods with nodes info")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pod -o wide")])])]),t._v(" "),a("tr",[a("td",[t._v("Validate yaml file with dry run")]),t._v(" "),a("td",[a("code",[t._v("kubectl apply --dry-run --validate -f pod-dummy.yaml")])])]),t._v(" "),a("tr",[a("td",[t._v("Diff deployed resource with local yaml file")]),t._v(" "),a("td",[a("code",[t._v("kubectl alpha diff -f <yaml file/dir>")])])]),t._v(" "),a("tr",[a("td",[t._v("Start a temporary pod for testing")]),t._v(" "),a("td",[a("code",[t._v("kubectl run --rm -i -t --image=alpine test-$RANDOM -- sh")])])]),t._v(" "),a("tr",[a("td",[t._v("Run wget test temporarily")]),t._v(" "),a("td",[a("code",[t._v("kubectl run --rm mytest --image=busybox -it")])])]),t._v(" "),a("tr",[a("td",[t._v("Run curl test temporarily")]),t._v(" "),a("td",[a("code",[t._v("kubectl run --rm mytest --image=yauritux/busybox-curl -it")])])]),t._v(" "),a("tr",[a("td",[t._v("kubectl run shell command")]),t._v(" "),a("td",[a("code",[t._v("kubectl exec -it mytest -- ls -l /etc/hosts")])])]),t._v(" "),a("tr",[a("td",[t._v("Get system conf via configmap")]),t._v(" "),a("td",[a("code",[t._v("kubectl -n kube-system get cm kubeadm-config -o yaml")])])]),t._v(" "),a("tr",[a("td",[t._v("kubectl run instance with replicas")]),t._v(" "),a("td",[a("code",[t._v("kubectl run my-nginx --image=nginx --replicas=2 --port=80")])])]),t._v(" "),a("tr",[a("td",[t._v("Explain resource")]),t._v(" "),a("td",[a("code",[t._v("kubectl explain pods=")]),t._v(", "),a("code",[t._v("kubectl explain svc")])])]),t._v(" "),a("tr",[a("td",[t._v("Get all services")]),t._v(" "),a("td",[a("code",[t._v("kubectl get service --all-namespaces")])])]),t._v(" "),a("tr",[a("td",[t._v("Query healthcheck endpoint")]),t._v(" "),a("td",[a("code",[t._v("curl -L http://127.0.0.1:10250/healthz")])])]),t._v(" "),a("tr",[a("td",[t._v("Open a bash terminal in a pod")]),t._v(" "),a("td",[a("code",[t._v("kubectl exec -it storage sh")])])]),t._v(" "),a("tr",[a("td",[t._v("Check pod environment variables")]),t._v(" "),a("td",[a("code",[t._v("kubectl exec redis-master-ft9ex env")])])]),t._v(" "),a("tr",[a("td",[t._v("Enable kubectl shell autocompletion")]),t._v(" "),a("td",[a("code",[t._v('echo "source <(kubectl completion bash)" >>~/.bashrc')]),t._v(", and reload")])]),t._v(" "),a("tr",[a("td",[t._v("Use minikube dockerd in your laptop")]),t._v(" "),a("td",[a("code",[t._v("eval $(minikube docker-env)")]),t._v(", No need to push docker hub any more")])]),t._v(" "),a("tr",[a("td",[t._v("Get services sorted by name")]),t._v(" "),a("td",[a("code",[t._v("kubectl get services --sort-by=.metadata.name")])])]),t._v(" "),a("tr",[a("td",[t._v("Get pods sorted by restart count")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'")])])]),t._v(" "),a("tr",[a("td",[t._v("Get logs from init container")]),t._v(" "),a("td",[a("code",[t._v("kubectl logs <pod-name> -c <init-container-2")])])]),t._v(" "),a("tr",[a("td",[t._v("Drain a nodes")]),t._v(" "),a("td",[a("code",[t._v("kubectl drain <node_name> --delete-local-data --ignore-daemonsets")])])])])]),t._v(" "),a("h2",{attrs:{id:"check-performance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-performance","aria-hidden":"true"}},[t._v("#")]),t._v(" Check Performance")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Get node resource usage")]),t._v(" "),a("td",[a("code",[t._v("kubectl top node")])])]),t._v(" "),a("tr",[a("td",[t._v("Get pod resource usage")]),t._v(" "),a("td",[a("code",[t._v("kubectl top pod")])])]),t._v(" "),a("tr",[a("td",[t._v("Get resource usage for a given pod")]),t._v(" "),a("td",[a("code",[t._v("kubectl top <podname> --containers")])])]),t._v(" "),a("tr",[a("td",[t._v("List resource utilization for all containers")]),t._v(" "),a("td",[a("code",[t._v("kubectl top pod --all-namespaces --containers=true")])])])])]),t._v(" "),a("h2",{attrs:{id:"resources-deletion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resources-deletion","aria-hidden":"true"}},[t._v("#")]),t._v(" Resources Deletion")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Delete pod")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete pod/<pod-name> -n <my-namespace>")])])]),t._v(" "),a("tr",[a("td",[t._v("Force delete")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete pod NAME --grace-period=0 --force")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete pods by labels")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete pod -l env=test")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete deployments by labels")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete deployment -l app=wordpress")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete all resources filtered by labels")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete pods,services -l name=myLabel")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete resources under a namespace")]),t._v(" "),a("td",[a("code",[t._v("kubectl -n my-ns delete po,svc --all")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete persist volumes by labels")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete pvc -l app=wordpress")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete statefulset only (not pods)")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete sts/<stateful_set_name> --cascade=false")])])])])]),t._v(" "),a("h2",{attrs:{id:"pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List all pods")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods")])])]),t._v(" "),a("tr",[a("td",[t._v("List pods for all namespace")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods -all-namespaces")])])]),t._v(" "),a("tr",[a("td",[t._v("List all critical pods")]),t._v(" "),a("td",[a("code",[t._v("kubectl get -n kube-system pods -a")])])]),t._v(" "),a("tr",[a("td",[t._v("List pods with more info")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pod -o wide=")]),t._v(", "),a("code",[t._v("kubectl get pod/<pod-name> -o yaml")])])]),t._v(" "),a("tr",[a("td",[t._v("Get pod info")]),t._v(" "),a("td",[a("code",[t._v("kubectl describe pod/srv-mysql-server")])])]),t._v(" "),a("tr",[a("td",[t._v("List all pods with labels")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods --show-labels")])])]),t._v(" "),a("tr",[a("td",[t._v("kubectl run command")]),t._v(" "),a("td",[a("code",[t._v('kubectl exec -it -n "$ns" "$podname" -- sh -c "echo $msg >>/dev/err.log"')])])])])]),t._v(" "),a("h2",{attrs:{id:"pod-advanced"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-advanced","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod Advanced")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Get pod by selector")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods -n $namespace --selector=\"app=syslog\" -o jsonpath='{.items[*].metadata.name}')")])])]),t._v(" "),a("tr",[a("td",[t._v("List pods and containers")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods -o='custom-columns=PODS:.metadata.name,CONTAINERS:.spec.containers[*].name'")])])]),t._v(" "),a("tr",[a("td",[t._v("List pods, containers and images")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods -o='custom-columns=PODS:.metadata.name,CONTAINERS:.spec.containers[*].name,Images:.spec.containers[*].image'")])])])])]),t._v(" "),a("h2",{attrs:{id:"label-annotations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#label-annotations","aria-hidden":"true"}},[t._v("#")]),t._v(" Label & Annotations")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Filter pods by label")]),t._v(" "),a("td",[a("code",[t._v("kubectl get pods -l owner=denny")])])]),t._v(" "),a("tr",[a("td",[t._v("Manually add label to a pod")]),t._v(" "),a("td",[a("code",[t._v("kubectl label pods dummy-input owner=denny")])])]),t._v(" "),a("tr",[a("td",[t._v("Remove label")]),t._v(" "),a("td",[a("code",[t._v("kubectl label pods dummy-input owner-")])])]),t._v(" "),a("tr",[a("td",[t._v("Manually add annonation to a pod")]),t._v(" "),a("td",[a("code",[t._v("kubectl annotate pods dummy-input my-url=https://www.dennyzhang.com")])])])])]),t._v(" "),a("h2",{attrs:{id:"deployment-scale"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deployment-scale","aria-hidden":"true"}},[t._v("#")]),t._v(" Deployment & Scale")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Scale out")]),t._v(" "),a("td",[a("code",[t._v("kubectl scale --replicas=3 deployment/nginx-app")])])]),t._v(" "),a("tr",[a("td",[t._v("Online rolling upgrade")]),t._v(" "),a("td",[a("code",[t._v("kubectl rollout app-v1 app-v2 --image=img:v2")])])]),t._v(" "),a("tr",[a("td",[t._v("Roll backup")]),t._v(" "),a("td",[a("code",[t._v("kubectl rollout app-v1 app-v2 --rollback")])])]),t._v(" "),a("tr",[a("td",[t._v("List rollout")]),t._v(" "),a("td",[a("code",[t._v("kubectl get rs")])])]),t._v(" "),a("tr",[a("td",[t._v("Check update status")]),t._v(" "),a("td",[a("code",[t._v("kubectl rollout status deployment/nginx-app")])])]),t._v(" "),a("tr",[a("td",[t._v("Check update history")]),t._v(" "),a("td",[a("code",[t._v("kubectl rollout history deployment/nginx-app")])])]),t._v(" "),a("tr",[a("td",[t._v("Pause/Resume")]),t._v(" "),a("td",[a("code",[t._v("kubectl rollout pause deployment/nginx-deployment=")]),t._v(", "),a("code",[t._v("resume")])])]),t._v(" "),a("tr",[a("td",[t._v("Rollback to previous version")]),t._v(" "),a("td",[a("code",[t._v("kubectl rollout undo deployment/nginx-deployment")])])])])]),t._v(" "),a("h2",{attrs:{id:"quota-limits-resource"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quota-limits-resource","aria-hidden":"true"}},[t._v("#")]),t._v(" Quota & Limits & Resource")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List Resource Quota")]),t._v(" "),a("td",[a("code",[t._v("kubectl get resourcequota")])])]),t._v(" "),a("tr",[a("td",[t._v("List Limit Range")]),t._v(" "),a("td",[a("code",[t._v("kubectl get limitrange")])])]),t._v(" "),a("tr",[a("td",[t._v("Customize resource definition")]),t._v(" "),a("td",[a("code",[t._v("kubectl set resources deployment nginx -c=nginx --limits=cpu=200m,memory=512Mi")])])])])]),t._v(" "),a("h2",{attrs:{id:"service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service","aria-hidden":"true"}},[t._v("#")]),t._v(" Service")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List all services")]),t._v(" "),a("td",[a("code",[t._v("kubectl get services")])])]),t._v(" "),a("tr",[a("td",[t._v("List service endpoints")]),t._v(" "),a("td",[a("code",[t._v("kubectl get endpoints")])])]),t._v(" "),a("tr",[a("td",[t._v("Get service detail")]),t._v(" "),a("td",[a("code",[t._v("kubectl get service nginx-service -o yaml")])])]),t._v(" "),a("tr",[a("td",[t._v("Expose deployment as lb service")]),t._v(" "),a("td",[a("code",[t._v("kubectl expose deployment/my-app --type=LoadBalancer --name=my-service")])])]),t._v(" "),a("tr",[a("td",[t._v("Expose service as lb service")]),t._v(" "),a("td",[a("code",[t._v("kubectl expose service/wordpress-1-svc --type=LoadBalancer --name=wordpress-lb")])])])])]),t._v(" "),a("h2",{attrs:{id:"statefulset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#statefulset","aria-hidden":"true"}},[t._v("#")]),t._v(" StatefulSet")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List statefulset")]),t._v(" "),a("td",[a("code",[t._v("kubectl get sts")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete statefulset only (not pods)")]),t._v(" "),a("td",[a("code",[t._v("kubectl delete sts/<stateful_set_name> --cascade=false")])])]),t._v(" "),a("tr",[a("td",[t._v("Scale statefulset")]),t._v(" "),a("td",[a("code",[t._v("kubectl scale sts/<stateful_set_name> --replicas=5")])])])])]),t._v(" "),a("h2",{attrs:{id:"volumes-volume-claims"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volumes-volume-claims","aria-hidden":"true"}},[t._v("#")]),t._v(" Volumes & Volume Claims")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Check the mounted volumes")]),t._v(" "),a("td",[a("code",[t._v("kubectl exec storage ls /data")])])]),t._v(" "),a("tr",[a("td",[t._v("Check persist volume")]),t._v(" "),a("td",[a("code",[t._v("kubectl describe pv/pv0001")])])]),t._v(" "),a("tr",[a("td",[t._v("List storage class")]),t._v(" "),a("td",[a("code",[t._v("kubectl get storageclass")])])]),t._v(" "),a("tr",[a("td",[t._v("Copy files")]),t._v(" "),a("td",[a("code",[t._v("kubectl cp /tmp/foo <namespace1>/<pod1>:/tmp/bar")])])])])]),t._v(" "),a("h2",{attrs:{id:"security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#security","aria-hidden":"true"}},[t._v("#")]),t._v(" Security")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List certificates")]),t._v(" "),a("td",[a("code",[t._v("kubectl get csr")])])])])]),t._v(" "),a("h2",{attrs:{id:"extenstions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extenstions","aria-hidden":"true"}},[t._v("#")]),t._v(" Extenstions")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List api group")]),t._v(" "),a("td",[a("code",[t._v("kubectl api-versions")])])]),t._v(" "),a("tr",[a("td",[t._v("List all CRD")]),t._v(" "),a("td",[a("code",[t._v("kubectl get crd")])])])])]),t._v(" "),a("h2",{attrs:{id:"components-services"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#components-services","aria-hidden":"true"}},[t._v("#")]),t._v(" Components & Services")]),t._v(" "),a("h3",{attrs:{id:"services-on-master-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#services-on-master-nodes","aria-hidden":"true"}},[t._v("#")]),t._v(" Services on Master Nodes")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("kube-apiserver")]),t._v(" "),a("td",[t._v("exposes the Kubernetes API from master nodes")])]),t._v(" "),a("tr",[a("td",[t._v("etcd")]),t._v(" "),a("td",[t._v("reliable data store for all k8s cluster data")])]),t._v(" "),a("tr",[a("td",[t._v("kube-scheduler")]),t._v(" "),a("td",[t._v("schedule pods to run on selected nodes")])]),t._v(" "),a("tr",[a("td",[t._v("kube-controller-manager")]),t._v(" "),a("td",[t._v("node controller, replication controller, endpoints controller, and service account & token controllers")])])])]),t._v(" "),a("h3",{attrs:{id:"services-on-worker-nodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#services-on-worker-nodes","aria-hidden":"true"}},[t._v("#")]),t._v(" Services on Worker Nodes")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("kubelet")]),t._v(" "),a("td",[t._v("makes sure that containers are running in a pod")])]),t._v(" "),a("tr",[a("td",[t._v("kube-proxy")]),t._v(" "),a("td",[t._v("perform connection forwarding")])]),t._v(" "),a("tr",[a("td",[t._v("Container Runtime")]),t._v(" "),a("td",[t._v("Kubernetes supported runtimes: Docker, rkt, runc and any OCI runtime-spec implementation.")])])])]),t._v(" "),a("h3",{attrs:{id:"tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tools","aria-hidden":"true"}},[t._v("#")]),t._v(" Tools")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("kubectl")]),t._v(" "),a("td",[t._v("the command line util to talk to k8s cluster")])]),t._v(" "),a("tr",[a("td",[t._v("kubeadm")]),t._v(" "),a("td",[t._v("the command to bootstrap the cluster")])]),t._v(" "),a("tr",[a("td",[t._v("kubefed")]),t._v(" "),a("td",[t._v("the command line to control a Kubernetes Cluster Federation")])]),t._v(" "),a("tr",[a("td",[t._v("Kubernetes Components")]),t._v(" "),a("td",[t._v("Kubernetes Components")])])])]),t._v(" "),a("h2",{attrs:{id:"other-components"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#other-components","aria-hidden":"true"}},[t._v("#")]),t._v(" Other Components")]),t._v(" "),a("h3",{attrs:{id:"log-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#log-files","aria-hidden":"true"}},[t._v("#")]),t._v(" Log files")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("API Server.log in master node")]),t._v(" "),a("td",[a("code",[t._v("/var/log/kube-apiserver.log")])])]),t._v(" "),a("tr",[a("td",[t._v("Scheduler.log in master node")]),t._v(" "),a("td",[a("code",[t._v("/var/log/kube-scheduler.log")])])]),t._v(" "),a("tr",[a("td",[t._v("Controller.log in master node")]),t._v(" "),a("td",[a("code",[t._v("/var/log/kube-controller-manager.log")])])]),t._v(" "),a("tr",[a("td",[t._v("Kubelet.log in worker node")]),t._v(" "),a("td",[a("code",[t._v("/var/log/kubelet.log")])])]),t._v(" "),a("tr",[a("td",[t._v("Kube Proxy.log in worker node")]),t._v(" "),a("td",[a("code",[t._v("/var/log/kubelet-proxy.log")])])])])]),t._v(" "),a("h3",{attrs:{id:"events-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#events-metrics","aria-hidden":"true"}},[t._v("#")]),t._v(" Events & Metrics")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("View all events")]),t._v(" "),a("td",[a("code",[t._v("kubectl get events --all-namespaces")])])])])]),t._v(" "),a("h3",{attrs:{id:"namespace-security"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#namespace-security","aria-hidden":"true"}},[t._v("#")]),t._v(" Namespace & Security")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List authenticated contexts")]),t._v(" "),a("td",[a("code",[t._v("kubectl config get-contexts")])])]),t._v(" "),a("tr",[a("td",[t._v("Switch context")]),t._v(" "),a("td",[a("code",[t._v("kubectl config use-context <cluster-name>")])])]),t._v(" "),a("tr",[a("td",[t._v("Delete the specified context")]),t._v(" "),a("td",[a("code",[t._v("kubectl config delete-context <cluster-name>")])])]),t._v(" "),a("tr",[a("td",[t._v("List all namespaces defined")]),t._v(" "),a("td",[a("code",[t._v("kubectl get namespaces")])])]),t._v(" "),a("tr",[a("td",[t._v("kubectl config file")]),t._v(" "),a("td",[a("code",[t._v("~/.kube/config")])])])])]),t._v(" "),a("h3",{attrs:{id:"network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network","aria-hidden":"true"}},[t._v("#")]),t._v(" Network")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Command")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Temporarily add a port-forwarding")]),t._v(" "),a("td",[a("code",[t._v("kubectl port-forward redis-izl09 6379")])])]),t._v(" "),a("tr",[a("td",[t._v("Add port-forwaring for deployment")]),t._v(" "),a("td",[a("code",[t._v("kubectl port-forward deployment/redis-master 6379:6379")])])]),t._v(" "),a("tr",[a("td",[t._v("Add port-forwaring for replicaset")]),t._v(" "),a("td",[a("code",[t._v("kubectl port-forward rs/redis-master 6379:6379")])])]),t._v(" "),a("tr",[a("td",[t._v("Add port-forwaring for service")]),t._v(" "),a("td",[a("code",[t._v("kubectl port-forward svc/redis-master 6379:6379")])])]),t._v(" "),a("tr",[a("td",[t._v("Get network policy")]),t._v(" "),a("td",[a("code",[t._v("kubectl get NetworkPolicy")])])])])]),t._v(" "),a("h2",{attrs:{id:"basic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic","aria-hidden":"true"}},[t._v("#")]),t._v(" Basic")]),t._v(" "),a("h3",{attrs:{id:"key-concepts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#key-concepts","aria-hidden":"true"}},[t._v("#")]),t._v(" Key Concepts")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("CNCF")]),t._v(" "),a("td",[t._v("Cloud Native Computing Foundation")])]),t._v(" "),a("tr",[a("td",[t._v("CRI")]),t._v(" "),a("td",[t._v("Container Runtime Interface")])]),t._v(" "),a("tr",[a("td",[t._v("CNI")]),t._v(" "),a("td",[t._v("Container Network Interface")])]),t._v(" "),a("tr",[a("td",[t._v("CSI")]),t._v(" "),a("td",[t._v("Container Storage Interface")])])])]),t._v(" "),a("h3",{attrs:{id:"kubernetes-critical-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-critical-files","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes Critical Files")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Comment")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Config folder")]),t._v(" "),a("td",[a("code",[t._v("/etc/kubernetes/")])])]),t._v(" "),a("tr",[a("td",[t._v("Certificate files")]),t._v(" "),a("td",[a("code",[t._v("/etc/kubernetes/pki/")])])]),t._v(" "),a("tr",[a("td",[t._v("Credentials to API server")]),t._v(" "),a("td",[a("code",[t._v("/etc/kubernetes/kubelet.conf")])])]),t._v(" "),a("tr",[a("td",[t._v("Superuser credentials")]),t._v(" "),a("td",[a("code",[t._v("/etc/kubernetes/admin.conf")])])]),t._v(" "),a("tr",[a("td",[t._v("Kubernets working dir")]),t._v(" "),a("td",[a("code",[t._v("/var/lib/kubelet/")])])]),t._v(" "),a("tr",[a("td",[t._v("Docker working dir")]),t._v(" "),a("td",[a("code",[t._v("/var/lib/docker/")])])]),t._v(" "),a("tr",[a("td",[t._v("Etcd working dir")]),t._v(" "),a("td",[a("code",[t._v("/var/lib/etcd/")])])]),t._v(" "),a("tr",[a("td",[t._v("Network cni")]),t._v(" "),a("td",[a("code",[t._v("/etc/cni/net.d/")])])]),t._v(" "),a("tr",[a("td",[t._v("Docker container log")]),t._v(" "),a("td",[a("code",[t._v("/var/log/containers/")])])]),t._v(" "),a("tr",[a("td",[t._v("Log files")]),t._v(" "),a("td",[a("code",[t._v("/var/log/pods/")])])]),t._v(" "),a("tr",[a("td",[t._v("Env")]),t._v(" "),a("td",[a("code",[t._v("export KUBECONFIG=/etc/kubernetes/admin.conf")])])]),t._v(" "),a("tr",[a("td",[t._v("Env")]),t._v(" "),a("td",[a("code",[t._v("/etc/systemd/system/kubelet.service.d/10-kubeadm.conf")])])])])]),t._v(" "),a("h3",{attrs:{id:"check-status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-status","aria-hidden":"true"}},[t._v("#")]),t._v(" Check status")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List everything")]),t._v(" "),a("td",[a("code",[t._v("kubectl get all --all-namespaces")])])]),t._v(" "),a("tr",[a("td",[t._v("Get cluster info")]),t._v(" "),a("td",[a("code",[t._v("kubectl cluster-info")])])]),t._v(" "),a("tr",[a("td",[t._v("Get configuration")]),t._v(" "),a("td",[a("code",[t._v("kubectl config view")])])]),t._v(" "),a("tr",[a("td",[t._v("Get kubectl version")]),t._v(" "),a("td",[a("code",[t._v("kubectl version")])])]),t._v(" "),a("tr",[a("td",[t._v("Get component status")]),t._v(" "),a("td",[a("code",[t._v("kubectl get componentstatus")])])]),t._v(" "),a("tr",[a("td",[t._v("Similar to "),a("code",[t._v("docker ps")])]),t._v(" "),a("td",[a("code",[t._v("kubectl get nodes")])])]),t._v(" "),a("tr",[a("td",[t._v("Similar to "),a("code",[t._v("docker inspect")])]),t._v(" "),a("td",[a("code",[t._v("kubectl describe pod/nginx-app-413181-cn")])])]),t._v(" "),a("tr",[a("td",[t._v("Similar to "),a("code",[t._v("docker logs")])]),t._v(" "),a("td",[a("code",[t._v("kubectl logs")])])]),t._v(" "),a("tr",[a("td",[t._v("Similar to "),a("code",[t._v("docker exec")])]),t._v(" "),a("td",[a("code",[t._v("kubectl exec")])])]),t._v(" "),a("tr",[a("td",[t._v("Get services for current namespace")]),t._v(" "),a("td",[a("code",[t._v("kubectl get svc")])])]),t._v(" "),a("tr",[a("td",[t._v("Get node status")]),t._v(" "),a("td",[a("code",[t._v("kubectl describe node/<node_name>")])])])])]),t._v(" "),a("h2",{attrs:{id:"names-of-certificates-files"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#names-of-certificates-files","aria-hidden":"true"}},[t._v("#")]),t._v(" Names of certificates files")]),t._v(" "),a("p",[t._v("Names of certificates files:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("ca.crt, ca.key")]),t._v(" (CA certificate)")]),t._v(" "),a("li",[a("code",[t._v("apiserver.crt, apiserver.key")]),t._v(" (API server certificate)")]),t._v(" "),a("li",[a("code",[t._v("apiserver-kubelet-client.crt, apiserver-kubelet-client.key")]),t._v(" (client certificate for the apiservers to connect to the kubelets securely)")]),t._v(" "),a("li",[a("code",[t._v("sa.pub, sa.key")]),t._v(" (a private key for signing ServiceAccount )")]),t._v(" "),a("li",[a("code",[t._v("front-proxy-ca.crt, front-proxy-ca.key")]),t._v(" (CA for the front proxy)")]),t._v(" "),a("li",[a("code",[t._v("front-proxy-client.crt, front-proxy-client.key")]),t._v(" (client cert for the front proxy client)")])]),t._v(" "),a("h2",{attrs:{id:"misc-scripts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#misc-scripts","aria-hidden":"true"}},[t._v("#")]),t._v(" Misc scripts")]),t._v(" "),a("h3",{attrs:{id:"tail-pod-log-by-label"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tail-pod-log-by-label","aria-hidden":"true"}},[t._v("#")]),t._v(" Tail pod log by label")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("namespace"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"mynamespace"')]),t._v("\nmylabel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app=mylabel"')]),t._v("\nkubectl get pod -l "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$mylabel")]),t._v('"')]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$namespace")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" -n1 \\\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" -F"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v("}'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -I"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \\\n      kubectl logs -n "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$namespace")]),t._v('"')]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"get-node-hardware-resource-utilization"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-node-hardware-resource-utilization","aria-hidden":"true"}},[t._v("#")]),t._v(" Get node hardware resource utilization")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("kubectl get nodes --no-headers \\\n     "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v("}'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -I "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \\\n     sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo {}; kubectl describe node {} | grep Allocated -A 5'")]),t._v("\n\nkubectl get nodes --no-headers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("awk")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{print "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v("}'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -I "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \\\n    sh -c "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'echo {}; kubectl describe node {} | grep Allocated -A 5 \\\n     | grep -ve Event -ve Allocated -ve percent -ve -- ; echo'")]),t._v("\n")])])]),a("h3",{attrs:{id:"apply-yaml-files-recursively"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apply-yaml-files-recursively","aria-hidden":"true"}},[t._v("#")]),t._v(" Apply yaml files recursively")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# create")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -1 */*.yml "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -v namespace "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -I"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" kubectl apply -f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# delete")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("time")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -1r */*.yml "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -v namespace "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -I"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" kubectl delete -f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"apply-the-configuration-in-manifest-yaml-and-delete-all-the-other-configmaps-that-are-not-in-the-file"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apply-the-configuration-in-manifest-yaml-and-delete-all-the-other-configmaps-that-are-not-in-the-file","aria-hidden":"true"}},[t._v("#")]),t._v(" Apply the configuration in manifest.yaml and delete all the other configmaps that are not in the file.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("kaubectl apply --prune -f manifest.yaml --all --prune-whitelist"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("core/v1/ConfigMap\n")])])]),a("h3",{attrs:{id:"list-all-critical-pods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-all-critical-pods","aria-hidden":"true"}},[t._v("#")]),t._v(" List all critical pods")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("kubectl --namespace kube-system get pods\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" pod "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("kubectl --namespace kube-system get pods -o jsonpath"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{.items[*].metadata.name}"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    node_info"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("kubectl --namespace kube-system describe pod $pod "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Node:"')]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Pod: '),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$pod")]),t._v(", "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$node_info")]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("h2",{attrs:{id:"helm-the-kubernetes-package-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#helm-the-kubernetes-package-manager","aria-hidden":"true"}},[t._v("#")]),t._v(" Helm: The Kubernetes Package Manager")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Helm")]),t._v(" "),a("td",[t._v("a chart manager.")])]),t._v(" "),a("tr",[a("td",[t._v("Charts")]),t._v(" "),a("td",[t._v("packages of pre-configured Kubernetes resources.")])]),t._v(" "),a("tr",[a("td",[t._v("Release")]),t._v(" "),a("td",[t._v("a collection of Kubernetes resources deployed to the cluster using Helm.")])]),t._v(" "),a("tr",[a("td",[t._v("tiller")]),t._v(" "),a("td",[t._v("helm server manages releases (installations) of your charts.")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("helm init")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm list")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm list -a")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm repo update")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm install stable/mysql")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm install --name mysql-release stable/mysql")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm inspect stable/mysql")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm status $helm_name")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm delete $helm_name")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("helm delete --purge $helm_name")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("~/.helm/cache/archive")]),t._v(" "),a("td")])])]),t._v(" "),a("p",[t._v("Release, list, inspect, delete, rollback, purge")]),t._v(" "),a("h2",{attrs:{id:"metric-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metric-server","aria-hidden":"true"}},[t._v("#")]),t._v(" Metric Server")]),t._v(" "),a("p",[t._v("Metrics Server is a cluster-wide aggregator of resource usage data.\nMetrics Server registered in the main API server through Kubernetes aggregator.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Core metrics")]),t._v(" "),a("td",[t._v("node/container level metrics; CPU, memory, disk and network, etc.")])]),t._v(" "),a("tr",[a("td",[t._v("Custom metrics")]),t._v(" "),a("td",[t._v("refers to application metrics, e.g. HTTP request rate.")])])])]),t._v(" "),a("p",[t._v("Today (Kubernetes 1.7), there are several sources of metrics within a Kubernetes cluster")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Name")]),t._v(" "),a("th",[t._v("Summary")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Heapster")]),t._v(" "),a("td",[t._v("k8s add-on")])]),t._v(" "),a("tr",[a("td",[t._v("Cadvisor")]),t._v(" "),a("td",[t._v("a standalone container/node metrics collection and monitoring tool.")])]),t._v(" "),a("tr",[a("td",[t._v("Kubernetes API")]),t._v(" "),a("td",[t._v("does not track metrics. But can get real time metrics")])])])]),t._v(" "),a("p",[t._v("Today, heapster is the source of the time-series data for the Kubernetes Dashboard.\nAll other Kubernetes components will supply their own metrics in a Prometheus format")]),t._v(" "),a("p",[t._v("In logging domain, we can say "),a("code",[t._v("syslog")]),t._v(" is the standard format\nIn metric domain, maybe we can choose "),a("code",[t._v("prometheus")]),t._v(" as the standard format.")])])}],!1,null,null,null);s.options.__file="cheatsheet.md";e.default=s.exports}}]);