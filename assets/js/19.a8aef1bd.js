(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{179:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"my-clusters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#my-clusters","aria-hidden":"true"}},[t._v("#")]),t._v(" My Clusters")]),t._v(" "),s("h2",{attrs:{id:"gce-cluster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gce-cluster","aria-hidden":"true"}},[t._v("#")]),t._v(" GCE Cluster")]),t._v(" "),s("p",[t._v("Built using: console.cloud.google.com\nThe cluster consist of 3 nodes (VMs) that are built using "),s("strong",[t._v("gke-tad1-cluster-pool-micro")]),t._v(" template. Originally the cluster was set up with")]),t._v(" "),s("p",[t._v("Cluster options:")]),t._v(" "),s("ul",[s("li",[t._v("Choose Zonal: us-west1-a")]),t._v(" "),s("li",[t._v("Pick your kubernetes version: 1.10.7-gke.2")]),t._v(" "),s("li",[t._v("Create a 3-node pool using the cheapest instance type - f1-micro (1 vCPU, 0.6 GB memory)")]),t._v(" "),s("li",[t._v("Boot disk size to 10GB, (don't enable preemptible nodes. They're cheaper but IP changes every day)")]),t._v(" "),s("li",[t._v("Enable auto-upgrade and auto-repair.")])]),t._v(" "),s("p",[t._v("Below the node pool there are some additional options.")]),t._v(" "),s("ul",[s("li",[t._v("Disable HTTP load balancing (load balancing is expensive in GCP) and also")]),t._v(" "),s("li",[t._v("Disable all the StackDriver stuff (also can be expensive and has flaky reliability in my experience) as well as - Disable the kubernetes dashboard")])]),t._v(" "),s("h3",{attrs:{id:"gcloud-cli"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gcloud-cli","aria-hidden":"true"}},[t._v("#")]),t._v(" GCloud CLI")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("brew cask "),s("span",{attrs:{class:"token function"}},[t._v("install")]),t._v(" google-cloud-sdk\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# GCloud")]),t._v("\ngcloud auth login\ngcloud config "),s("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" project kubernetes-tad1\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Obtain Kubernetes config file")]),t._v("\ngcloud container clusters get-credentials tad1-cluster --zone"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("us-west1-a\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Create cluster role-binding")]),t._v("\nkubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user "),s("span",{attrs:{class:"token variable"}},[s("span",{attrs:{class:"token variable"}},[t._v("$(")]),t._v("gcloud config get-value account"),s("span",{attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Same as above but with speciic user")]),t._v("\nkubectl create clusterrolebinding myname-cluster-admin-binding \\\n  --clusterrole"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("cluster-admin \\\n  --user"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("tadone@gmail.com\n")])])]),s("h3",{attrs:{id:"traefik-load-balancer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#traefik-load-balancer","aria-hidden":"true"}},[t._v("#")]),t._v(" Traefik Load Balancer")]),t._v(" "),s("p",[t._v("To test out traefik.toml without valid certificate:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("defaultEntryPoints "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v('"http"')]),t._v(", "),s("span",{attrs:{class:"token string"}},[t._v('"https"')]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entryPoints"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entryPoints.http"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  address "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('":80"')]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entryPoints.http.forwardedHeaders"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      trustedIPs "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v('"0.0.0.0/0"')]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entryPoints.http.redirect"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      entryPoint "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"https"')]),t._v("\n  "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entryPoints.https"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  address "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('":443"')]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entryPoints.https.tls"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("entryPoints.https.forwardedHeaders"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      trustedIPs "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{attrs:{class:"token string"}},[t._v('"0.0.0.0/0"')]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("Install minikube: "),s("code",[t._v("brew cask install minikube")])])]),t._v(" "),s("h2",{attrs:{id:"minkube-cluster"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#minkube-cluster","aria-hidden":"true"}},[t._v("#")]),t._v(" Minkube Cluster")]),t._v(" "),s("p",[t._v("Minkube is used to test Kubernetes locally")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("# Download hyperkit driver")]),t._v("\nbrew "),s("span",{attrs:{class:"token function"}},[t._v("install")]),t._v(" hyperkit\n"),s("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("chown")]),t._v(" root:wheel "),s("span",{attrs:{class:"token variable"}},[s("span",{attrs:{class:"token variable"}},[t._v("$(")]),t._v("brew --prefix"),s("span",{attrs:{class:"token variable"}},[t._v(")")])]),t._v("/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit\n"),s("span",{attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("chmod")]),t._v(" u+s "),s("span",{attrs:{class:"token variable"}},[s("span",{attrs:{class:"token variable"}},[t._v("$(")]),t._v("brew --prefix"),s("span",{attrs:{class:"token variable"}},[t._v(")")])]),t._v("/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Start minikube")]),t._v("\nminikube start --vm-driver hyperkit\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Deploy hello-minikube image")]),t._v("\nkubectl run hello-minikube --image"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("k8s.gcr.io/echoserver:1.10 --port"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("8080\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Create a Service object that exposes the deployment:")]),t._v("\nkubectl expose deployment hello-minikube --type"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("NodePort\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# When the pod is running we can curl it")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("curl")]),t._v(" "),s("span",{attrs:{class:"token variable"}},[s("span",{attrs:{class:"token variable"}},[t._v("$(")]),t._v("minikube "),s("span",{attrs:{class:"token function"}},[t._v("service")]),t._v(" hello-minikube --url"),s("span",{attrs:{class:"token variable"}},[t._v(")")])]),t._v("\n\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Clean up")]),t._v("\nkubectl delete services hello-minikube\nkubectl delete deployment hello-minikube\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Optionally stop minikube")]),t._v("\nminikube stop\n")])])]),s("h3",{attrs:{id:"create-service"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-service","aria-hidden":"true"}},[t._v("#")]),t._v(" Create Service")]),t._v(" "),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[t._v("Use a cloud provider like Google Kubernetes Engine or Amazon Web Services to create a Kubernetes cluster. This tutorial creates an external load balancer, which requires a cloud provider.")]),t._v(" "),s("p",[t._v("Configure kubectl to communicate with your Kubernetes API server. For instructions, see the documentation for your cloud provider.")])]),t._v(" "),s("p",[t._v("Creating a service for an application running in five pods.")]),t._v(" "),s("ol",[s("li",[t._v("This command creates a Deployment object and an associated ReplicaSet object. The ReplicaSet has five Pods, each of which runs the Hello World application.")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("kubectl run hello-world --replicas"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("5 --labels"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),s("span",{attrs:{class:"token string"}},[t._v('"run=load-balancer-example"')]),t._v(" --image"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("gcr.io/google-samples/node-hello:1.0  --port"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("8080\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("Display information about the Deployment and ReplicaSets")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("# Deployment")]),t._v("\nkubectl get deployments hello-world\nkubectl describe deployments hello-world\n"),s("span",{attrs:{class:"token comment"}},[t._v("# ReplicaSets")]),t._v("\nkubectl get replicasets\nkubectl describe replicasets\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("Create a Service object that exposes the deployment:")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("kubectl expose deployment hello-world --type"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("LoadBalancer --name"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("my-service\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[t._v("Display information about the Service:")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("kubectl get services my-service\nkubectl describe services my-service\n")])])]),s("p",[t._v("Make a note of the external IP address ("),s("code",[t._v("LoadBalancer Ingress")]),t._v(") exposed by your service. Also note the value of "),s("code",[t._v("Port")]),t._v(" and "),s("code",[t._v("NodePort")]),t._v(".")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("Port")]),t._v(" - internal to kubernetes")]),t._v(" "),s("li",[s("code",[t._v("NodePoert")]),t._v(" - external to the world")])]),t._v(" "),s("ol",{attrs:{start:"5"}},[s("li",[t._v("In the "),s("code",[t._v("describe services my-service")]),t._v(" output, you can see that the service has several endpoints.  These are internal addresses of the pods that are running the Hello World application. To verify these are pod addresses, enter this command:")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("kubectl get pods --output"),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("wide\n")])])]),s("p",[t._v("Use the external IP address (LoadBalancer Ingress) to access the Hello World application:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{attrs:{class:"token comment"}},[t._v("# Minikube (Will automatically open in browser)")]),t._v("\nminikube "),s("span",{attrs:{class:"token function"}},[t._v("service")]),t._v(" my-service\n"),s("span",{attrs:{class:"token comment"}},[t._v("# Cloud provider")]),t._v("\n"),s("span",{attrs:{class:"token function"}},[t._v("curl")]),t._v(" http://"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("external-ip"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(":"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("port"),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("Where "),s("code",[t._v("<external-ip>")]),t._v(" is the external IP address ("),s("code",[t._v("LoadBalancer Ingress")]),t._v(") of your Service, and "),s("code",[t._v("<port>")]),t._v(" is the value of "),s("code",[t._v("Port")]),t._v(" in your Service description. The response to a successful request is a hello message: "),s("code",[t._v("Hello Kubernetes!")])]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[t._v("Cleaning Up")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("kubectl delete services my-service\nkubectl delete deployment hello-world\n")])])]),s("h3",{attrs:{id:"hostpath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hostpath","aria-hidden":"true"}},[t._v("#")]),t._v(" HostPath")]),t._v(" "),s("p",[t._v("HostPath (single node testing only – local storage is not supported in any way and "),s("strong",[t._v("WILL NOT WORK")]),t._v(" in a multi-node cluster)")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{attrs:{class:"token key atrule"}},[t._v("kind")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PersistentVolume\n"),s("span",{attrs:{class:"token key atrule"}},[t._v("apiVersion")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),s("span",{attrs:{class:"token key atrule"}},[t._v("metadata")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{attrs:{class:"token key atrule"}},[t._v("name")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gitlab"),s("span",{attrs:{class:"token punctuation"}},[t._v("-")]),t._v("data\n  "),s("span",{attrs:{class:"token key atrule"}},[t._v("namespace")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gitlab\n"),s("span",{attrs:{class:"token key atrule"}},[t._v("spec")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{attrs:{class:"token key atrule"}},[t._v("capacity")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{attrs:{class:"token key atrule"}},[t._v("storage")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 8Gi\n  "),s("span",{attrs:{class:"token key atrule"}},[t._v("accessModes")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ReadWriteMany\n  "),s("span",{attrs:{class:"token key atrule"}},[t._v("hostPath")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{attrs:{class:"token key atrule"}},[t._v("path")]),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token string"}},[t._v('"/tmp/gitlab-data"')]),t._v("\n")])])])])}],!1,null,null,null);n.options.__file="cluster.md";a.default=n.exports}}]);