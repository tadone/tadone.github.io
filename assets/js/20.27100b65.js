(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{184:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"kubernetes-configuration-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-configuration-options","aria-hidden":"true"}},[t._v("#")]),t._v(" Kubernetes Configuration Options")]),t._v(" "),a("h2",{attrs:{id:"pod-env-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-env-variables","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod ENV Variables")]),t._v(" "),a("p",[t._v("Use environment variables to define arguments")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("env:\n- name: MESSAGE\n  value: "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),t._v("\ncommand: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/echo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nargs: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("MESSAGE"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"pod-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod-commands","aria-hidden":"true"}},[t._v("#")]),t._v(" Pod Commands")]),t._v(" "),a("p",[t._v("Run a command in a shell")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("command: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/sh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nargs: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-c"')]),t._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"while true; do echo hello; sleep 10; done"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("p",[t._v("Example that will "),a("code",[t._v("printenv")]),t._v(" HOSTNAME and KUBERNETES_PORT")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v("Â ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("purpose")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" demonstrate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("command\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" command"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("container\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" debian\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"printenv"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"HOSTNAME"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"KUBERNETES_PORT"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restartPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" OnFailure\n")])])]),a("h2",{attrs:{id:"session-affinity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#session-affinity","aria-hidden":"true"}},[t._v("#")]),t._v(" Session Affinity")]),t._v(" "),a("p",[t._v("Enable Session Affinity (a.k.a Sticky Session) to Kubernetes service")]),t._v(" "),a("p",[t._v("This would be the yaml file of the service:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Service\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("service\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("selector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("app")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" my"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("app\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" http\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("protocol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" TCP\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("port")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("targetPort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("sessionAffinity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ClientIP\n")])])]),a("p",[t._v("If you want to specify time, as well, this is what needs to be added:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("sessionAffinityConfig")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("clientIP")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("timeoutSeconds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n")])])]),a("h2",{attrs:{id:"liveness-readiness-probe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#liveness-readiness-probe","aria-hidden":"true"}},[t._v("#")]),t._v(" Liveness & Readiness Probe")]),t._v(" "),a("p",[t._v("Probes have a number of fields that you can use to more precisely control the behavior of liveness and readiness checks:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("initialDelaySeconds:")]),t._v(" Number of seconds after the container has started before liveness or readiness probes are initiated.")]),t._v(" "),a("li",[t._v("periodSeconds: How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.")]),t._v(" "),a("li",[a("strong",[t._v("timeoutSeconds:")]),t._v(" Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1.")]),t._v(" "),a("li",[a("strong",[t._v("successThreshold:")]),t._v(" Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.")]),t._v(" "),a("li",[a("strong",[t._v("failureThreshold:")]),t._v(" When a Pod starts and the probe fails, Kubernetes will try failureThreshold times before giving up. Giving up in case of liveness probe means restarting the Pod. In case of readiness probe the Pod will be marked Unready. Defaults to 3. Minimum value is 1.")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" liveness\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" liveness"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("exec\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /bin/sh\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("c\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" echo ok "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" /tmp/health; sleep 10; rm "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("rf /tmp/health; sleep 600\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gcr.io/google_containers/busybox\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("livenessProbe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("exec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" cat\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" /tmp/health\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("initialDelaySeconds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("timeoutSeconds")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" liveness\n")])])]),a("h2",{attrs:{id:"image-pull-policy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#image-pull-policy","aria-hidden":"true"}},[t._v("#")]),t._v(" Image Pull Policy")]),t._v(" "),a("p",[t._v("The default pull policy is "),a("code",[t._v("IfNotPresent")]),t._v(" which causes the Kubelet to skip pulling an image if it already exists. If you would like to always force a pull, you can do one of the following:")]),t._v(" "),a("ul",[a("li",[t._v("set the "),a("code",[t._v("imagePullPolicy")]),t._v(" of the container to "),a("code",[t._v("Always")])]),t._v(" "),a("li",[t._v("omit the "),a("code",[t._v("imagePullPolicy")]),t._v(" and use "),a("code",[t._v(":latest")]),t._v(" as the tag for the image to use")]),t._v(" "),a("li",[t._v("omit the "),a("code",[t._v("imagePullPolicy")]),t._v(" and the tag for the image to use")])]),t._v(" "),a("h2",{attrs:{id:"cpu-memory-units"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-memory-units","aria-hidden":"true"}},[t._v("#")]),t._v(" CPU & Memory Units")]),t._v(" "),a("p",[a("strong",[t._v("Meaning of CPU")])]),t._v(" "),a("p",[t._v("Limits and requests for CPU resources are measured in cpu units. One cpu, in Kubernetes, is equivalent to:")]),t._v(" "),a("ul",[a("li",[t._v("1 AWS vCPU")]),t._v(" "),a("li",[t._v("1 Azure vCore")]),t._v(" "),a("li",[t._v("1 Hyperthread on a bare-metal Intel processor with Hyperthreading")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("CPU#")]),t._v(" "),a("th",[t._v("PCT")]),t._v(" "),a("th",[t._v("Requests/Limits (millicpu)")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("1vCPU")]),t._v(" "),a("td",[t._v("100%")]),t._v(" "),a("td",[t._v("cpu: 1")])]),t._v(" "),a("tr",[a("td",[t._v("1vCPU")]),t._v(" "),a("td",[t._v("50%")]),t._v(" "),a("td",[t._v("cpu: 500m")])]),t._v(" "),a("tr",[a("td",[t._v("1vCPU")]),t._v(" "),a("td",[t._v("25%")]),t._v(" "),a("td",[t._v("cpu: 250m")])]),t._v(" "),a("tr",[a("td",[t._v("2vCPU")]),t._v(" "),a("td",[t._v("50%")]),t._v(" "),a("td",[t._v("cpu: 1")])]),t._v(" "),a("tr",[a("td",[t._v("2vCPU")]),t._v(" "),a("td",[t._v("25%")]),t._v(" "),a("td",[t._v("cpu: 500m")])]),t._v(" "),a("tr",[a("td",[t._v("2vCPU")]),t._v(" "),a("td",[t._v("10%")]),t._v(" "),a("td",[t._v("cpu: 50m")])]),t._v(" "),a("tr",[a("td",[t._v("4vCPU")]),t._v(" "),a("td",[t._v("24%")]),t._v(" "),a("td",[t._v("cpu: 1")])])])]),t._v(" "),a("p",[a("strong",[t._v("Meaning of memory")])]),t._v(" "),a("p",[t._v("Limits and requests for "),a("code",[t._v("memory")]),t._v(" are measured in bytes.\nYou can use M(egabytes) or Mi(bibytes). These are equivalent:\n"),a("code",[t._v("129M or 123Mi")])]),t._v(" "),a("blockquote",[a("p",[t._v("1 Megabyte (MB) = (1000)^2 bytes = 1000000 bytes."),a("br"),t._v("\n1 Mebibyte (MiB) = (1024)^2 bytes = 1048576 bytes.")])]),t._v(" "),a("h2",{attrs:{id:"resource-limits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resource-limits","aria-hidden":"true"}},[t._v("#")]),t._v(" Resource Limits")]),t._v(" "),a("p",[t._v("Specify Limit Range for a namespace:\n"),a("code",[t._v("kubectl create -f memory-defaults.yaml --namespace=default-mem-example")]),t._v(" "),a("strong",[t._v("memory-defaults.yaml")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" LimitRange\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" mem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("limit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("range\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("limits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("memory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 512Mi\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("defaultRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("memory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 256Mi\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Container\n")])])]),a("p",[t._v("Resource Limits for a container")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v("Â ")]),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imagePullPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Always\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" default"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("mem"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("demo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("ctr\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("resources")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Specify resources limits/requests")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("limits")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("memory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 512Mi               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 512 Mebibytes memory limit")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("requests")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("memory")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 256Mi               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Application requests 256Mi from the cluster")]),t._v("\n")])])]),a("h2",{attrs:{id:"taints-and-tolerations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taints-and-tolerations","aria-hidden":"true"}},[t._v("#")]),t._v(" Taints and Tolerations")]),t._v(" "),a("p",[t._v("You can think of a taint as a bad smell that is added to a node. Once a node is tainted pods that donât declare a toleration for the taint wonât be scheduled to that node. Depending on how bad the smell is (the strength of the taint) the prohibition may be soft or hard, and running pods that donât tolerate the taint may be evicted from the node.")]),t._v(" "),a("h3",{attrs:{id:"taints-explained"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taints-explained","aria-hidden":"true"}},[t._v("#")]),t._v(" Taints Explained")]),t._v(" "),a("p",[t._v("Nodes are tainted using kubectl:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("kubectl taint nodes nodename key=value:effect\n")])])]),a("p",[t._v("A taint consists of a key, a value for the key, and an effect. The key and value can be anything and act just like key:value pairs act throughout kubernetes: something matches if it specifies the same key and value.")]),t._v(" "),a("p",[t._v("The effect can be:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("PreferNoSchedule:")]),t._v(" Prefer not to schedule intolerant pods to the tainted node")]),t._v(" "),a("li",[a("strong",[t._v("NoSchedule:")]),t._v(" Prohibits scheduling intolerant pods to the tainted node")]),t._v(" "),a("li",[a("strong",[t._v("NoExecute:")]),t._v(" Prohibits and also evict intolerant pods that are already running there")])]),t._v(" "),a("p",[t._v("For example letâs say that I have added a node to run elasticsearch, and I donât want anything else running on that node:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("kubectl taint nodes es-node elasticsearch=false:NoExecute\n")])])]),a("p",[t._v("Once the node is tainted we can see the taint when using kubectl to describe the node:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$kubectl describe nodes es-node\nName:               es-node\n...\nTaints:             elasticsearch=false:NoExecute\n")])])]),a("h3",{attrs:{id:"tolerations-explained"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tolerations-explained","aria-hidden":"true"}},[t._v("#")]),t._v(" Tolerations Explained")]),t._v(" "),a("p",[t._v("A toleration is how a pod declares that it can stand the smell of a taint. Tolerations are a property of the "),a("code",[t._v("PodSpec")]),t._v(" and a toleration for the taint above might look like this:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tolerations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" elasticsearch   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Key name")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Equal      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Either Equal or Exists")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("false         ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Value")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("effect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NoExecute    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Effect")]),t._v("\n")])])]),a("p",[t._v("To tolerate a specific taint the "),a("code",[t._v("key name")]),t._v(" should be set to the same name used for the taintâs key, âelasticsearchâ in this example.")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("operator")]),t._v(" can be one of Equal or Exists. If set to Equal then the value is required and must match the key value on the taint. If set to Exists then the value should be omitted and the toleration will match any taint with the specified key name.")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Equal:")]),t._v(" The key/value/effect parameters must match. This is the default.")]),t._v(" "),a("li",[a("strong",[t._v("Exists:")]),t._v(" The key/effect parameters must match. You must leave a blank value parameter, which matches any.")])]),t._v(" "),a("p",[t._v("If "),a("code",[t._v("effect")]),t._v(" is provided it must be PreferredNoSchedule, NoSchedule or NoExecute and should match the "),a("code",[t._v("effect")]),t._v(" on the taint. If "),a("code",[t._v("effect")]),t._v(" is omitted then the toleration will match any taint with any "),a("code",[t._v("effect")]),t._v(" as long as the key and value match.")]),t._v(" "),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples","aria-hidden":"true"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[a("code",[t._v("Untaint")]),t._v(" the master nodes and verify as below:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl taint nodes --all node-role.kubernetes.io/master-\nnode "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node1"')]),t._v(" untainted\n\n$ kubectl describe nodes node1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -i taint\nTaints:             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("Set "),a("code",[t._v("NoExecute")]),t._v(" taint on node2:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl taint nodes node2 node2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DoNotSchedulePods:NoExecute\nnode "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node2"')]),t._v(" tainted\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("node1 ~"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("$ kubectl describe nodes node2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" Taint\nTaints:             node2"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("DoNotSchedulePods:NoExecute\n")])])]),a("p",[a("code",[t._v("Untaint")]),t._v(" the setting on node2")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ kubectl taint nodes node3 node3:NoSchedule-\nnode "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node2"')]),t._v(" untainted\n\n$ kubectl describe nodes node2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" Taint\nTaints:             "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("none"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Basic Example")]),t._v("\nkubectl taint nodes node1 key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("value:NoSchedule\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This will remove the node-role.kubernetes.io/master taint from any nodes that have it, including the master node, meaning that the scheduler will then be able to schedule pods everywhere.")]),t._v("\nkubectl taint nodes --all node-role.kubernetes.io/master-\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Do not schedule pods on node3 with kye:value dedicated=experimental")]),t._v("\nkubectl taint nodes node3 dedicated"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("experimental:NoSchedule\n")])])]),a("p",[t._v("Taint by label")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("kubectl taint node -l myLabel"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("X dedicated"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("foo:PreferNoSchedule\n")])])]),a("p",[t._v("This Pod can be scheduled on a node that has the taint dedicated=experimental:NoSchedule:")]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tolerations")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dedicated       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Matches the taint's key")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("operator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Equal      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Equal, which means the value key has to match")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" experimental  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# Must match the tain with "Equal" operator')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("effect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" NoSchedule   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# If included must match taint")]),t._v("\n")])])]),a("h2",{attrs:{id:"node-selector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-selector","aria-hidden":"true"}},[t._v("#")]),t._v(" Node Selector")]),t._v(" "),a("p",[a("code",[t._v("nodeSelector")]),t._v(" is the simplest form of constraint. "),a("code",[t._v("nodeSelector")]),t._v(" is a field of PodSpec. It specifies a map of key-value pairs. For the pod to be eligible to run on a node, the node must have each of the indicated key-value pairs as "),a("code",[t._v("labels")]),t._v(" (it can have additional labels as well). The most common usage is one key-value pair.")]),t._v(" "),a("p",[a("strong",[t._v("Attach label to a node")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("kubectl label nodes kubernetes-node-1 disktype=ssd\n")])])]),a("p",[a("strong",[t._v("Add a nodeSelector field to your pod configuration")])]),t._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v("Â ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("apiVersion")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" v1\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("kind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Pod\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("metadata")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("labels")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" test\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spec")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("containers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("imagePullPolicy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" IfNotPresent\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nodeSelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("disktype")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ssd\n")])])]),a("p",[t._v("When you then run "),a("code",[t._v("kubectl create -f pod-nginx.yaml")]),t._v(", the Pod will get scheduled on the node that you attached the label to.")]),t._v(" "),a("p",[a("strong",[t._v("Built-in node labels")])]),t._v(" "),a("ul",[a("li",[t._v("kubernetes.io/hostname")]),t._v(" "),a("li",[t._v("failure-domain.beta.kubernetes.io/zone")]),t._v(" "),a("li",[t._v("failure-domain.beta.kubernetes.io/region")]),t._v(" "),a("li",[t._v("beta.kubernetes.io/instance-type")]),t._v(" "),a("li",[t._v("beta.kubernetes.io/os")]),t._v(" "),a("li",[t._v("beta.kubernetes.io/arch")])])])}],!1,null,null,null);n.options.__file="configuration.md";e.default=n.exports}}]);