(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{177:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("Install minikube: "),a("code",[e._v("brew cask install minikube")])])]),e._v(" "),a("h1",{attrs:{id:"start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start","aria-hidden":"true"}},[e._v("#")]),e._v(" Start")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[e._v("# Download hyperkit driver")]),e._v("\nbrew "),a("span",{attrs:{class:"token function"}},[e._v("install")]),e._v(" hyperkit\n"),a("span",{attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{attrs:{class:"token function"}},[e._v("chown")]),e._v(" root:wheel "),a("span",{attrs:{class:"token variable"}},[a("span",{attrs:{class:"token variable"}},[e._v("$(")]),e._v("brew --prefix"),a("span",{attrs:{class:"token variable"}},[e._v(")")])]),e._v("/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit\n"),a("span",{attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),a("span",{attrs:{class:"token function"}},[e._v("chmod")]),e._v(" u+s "),a("span",{attrs:{class:"token variable"}},[a("span",{attrs:{class:"token variable"}},[e._v("$(")]),e._v("brew --prefix"),a("span",{attrs:{class:"token variable"}},[e._v(")")])]),e._v("/opt/docker-machine-driver-hyperkit/bin/docker-machine-driver-hyperkit\n"),a("span",{attrs:{class:"token comment"}},[e._v("# Start minikube")]),e._v("\nminikube start --vm-driver hyperkit\n\n"),a("span",{attrs:{class:"token comment"}},[e._v("# Deploy hello-minikube image")]),e._v("\nkubectl run hello-minikube --image"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("k8s.gcr.io/echoserver:1.10 --port"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("8080\n"),a("span",{attrs:{class:"token comment"}},[e._v("# Create a Service object that exposes the deployment:")]),e._v("\nkubectl expose deployment hello-minikube --type"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("NodePort\n\n"),a("span",{attrs:{class:"token comment"}},[e._v("# When the pod is running we can curl it")]),e._v("\n"),a("span",{attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),a("span",{attrs:{class:"token variable"}},[a("span",{attrs:{class:"token variable"}},[e._v("$(")]),e._v("minikube "),a("span",{attrs:{class:"token function"}},[e._v("service")]),e._v(" hello-minikube --url"),a("span",{attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n\n"),a("span",{attrs:{class:"token comment"}},[e._v("# Clean up")]),e._v("\nkubectl delete services hello-minikube\nkubectl delete deployment hello-minikube\n"),a("span",{attrs:{class:"token comment"}},[e._v("# Optionally stop minikube")]),e._v("\nminikube stop\n")])])]),a("h1",{attrs:{id:"create-service"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-service","aria-hidden":"true"}},[e._v("#")]),e._v(" Create Service")]),e._v(" "),a("div",{staticClass:"warning custom-block"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("Use a cloud provider like Google Kubernetes Engine or Amazon Web Services to create a Kubernetes cluster. This tutorial creates an external load balancer, which requires a cloud provider.")]),e._v(" "),a("p",[e._v("Configure kubectl to communicate with your Kubernetes API server. For instructions, see the documentation for your cloud provider.")])]),e._v(" "),a("p",[e._v("Creating a service for an application running in five pods.")]),e._v(" "),a("ol",[a("li",[e._v("This command creates a Deployment object and an associated ReplicaSet object. The ReplicaSet has five Pods, each of which runs the Hello World application.")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl run hello-world --replicas"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("5 --labels"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),a("span",{attrs:{class:"token string"}},[e._v('"run=load-balancer-example"')]),e._v(" --image"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("gcr.io/google-samples/node-hello:1.0  --port"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("8080\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[e._v("Display information about the Deployment and ReplicaSets")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[e._v("# Deployment")]),e._v("\nkubectl get deployments hello-world\nkubectl describe deployments hello-world\n"),a("span",{attrs:{class:"token comment"}},[e._v("# ReplicaSets")]),e._v("\nkubectl get replicasets\nkubectl describe replicasets\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[e._v("Create a Service object that exposes the deployment:")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl expose deployment hello-world --type"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("LoadBalancer --name"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("my-service\n")])])]),a("ol",{attrs:{start:"4"}},[a("li",[e._v("Display information about the Service:")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl get services my-service\nkubectl describe services my-service\n")])])]),a("p",[e._v("Make a note of the external IP address ("),a("code",[e._v("LoadBalancer Ingress")]),e._v(") exposed by your service. Also note the value of "),a("code",[e._v("Port")]),e._v(" and "),a("code",[e._v("NodePort")]),e._v(".")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Port")]),e._v(" - internal to kubernetes")]),e._v(" "),a("li",[a("code",[e._v("NodePoert")]),e._v(" - external to the world")])]),e._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[e._v("In the "),a("code",[e._v("describe services my-service")]),e._v(" output, you can see that the service has several endpoints.  These are internal addresses of the pods that are running the Hello World application. To verify these are pod addresses, enter this command:")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl get pods --output"),a("span",{attrs:{class:"token operator"}},[e._v("=")]),e._v("wide\n")])])]),a("p",[e._v("Use the external IP address (LoadBalancer Ingress) to access the Hello World application:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[e._v("# Minikube (Will automatically open in browser)")]),e._v("\nminikube "),a("span",{attrs:{class:"token function"}},[e._v("service")]),e._v(" my-service\n"),a("span",{attrs:{class:"token comment"}},[e._v("# Cloud provider")]),e._v("\n"),a("span",{attrs:{class:"token function"}},[e._v("curl")]),e._v(" http://"),a("span",{attrs:{class:"token operator"}},[e._v("<")]),e._v("external-ip"),a("span",{attrs:{class:"token operator"}},[e._v(">")]),e._v(":"),a("span",{attrs:{class:"token operator"}},[e._v("<")]),e._v("port"),a("span",{attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("p",[e._v("Where "),a("code",[e._v("<external-ip>")]),e._v(" is the external IP address ("),a("code",[e._v("LoadBalancer Ingress")]),e._v(") of your Service, and "),a("code",[e._v("<port>")]),e._v(" is the value of "),a("code",[e._v("Port")]),e._v(" in your Service description. The response to a successful request is a hello message: "),a("code",[e._v("Hello Kubernetes!")])]),e._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[e._v("Cleaning Up")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("kubectl delete services my-service\nkubectl delete deployment hello-world\n")])])])])}],!1,null,null,null);r.options.__file="minikube.md";t.default=r.exports}}]);