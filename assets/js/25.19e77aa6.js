(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{156:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"shortcuts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shortcuts","aria-hidden":"true"}},[t._v("#")]),t._v(" Shortcuts")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("ctrl-a  # Move to the start of line\nctrl-e  # Move to end of a line\n\nctrl-k  # Remove (Cut) text after the cursor\nctrl-y  # Yank text (Copy)\n\nctrl-r  # Search previous command from history\n")])])]),a("h2",{attrs:{id:"shell-basics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-basics","aria-hidden":"true"}},[t._v("#")]),t._v(" Shell Basics")]),t._v(" "),a("ul",[a("li",[t._v("Export variable to the environment. All child processes will get this variable: "),a("code",[t._v("export varname=value")])]),t._v(" "),a("li",[t._v("Display current Shell Variables "),a("code",[t._v("set | sort")])]),t._v(" "),a("li",[t._v("Set and Unset Shell Options:"),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("shopt")]),t._v(" -s "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("option"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("# Set shell option")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("shopt")]),t._v(" -u "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("option"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("# Unset shell option")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("Create symbolic link "),a("code",[t._v("ln -s /path/to/file /path/to/symlink")])]),t._v(" "),a("li",[t._v("Pass STDOUT and STDERR to /dev/null: "),a("code",[t._v("command > /dev/null 2>&1")])]),t._v(" "),a("li",[t._v("Time Stamps "),a("code",[t._v("stat file")]),t._v(":\n"),a("ul",[a("li",[t._v("Access - the last time the file was read")]),t._v(" "),a("li",[t._v("Modify - the last time the file was modified (content has been modified). Virtually, every modify is create.")]),t._v(" "),a("li",[t._v("Change - the last time meta data of the file was changed (e.g. permissions) To display this information, you can use stat which is part of the coreutils.")])])]),t._v(" "),a("li",[t._v("Command Substitution $(command)")])]),t._v(" "),a("h2",{attrs:{id:"built-in-vs-external"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#built-in-vs-external","aria-hidden":"true"}},[t._v("#")]),t._v(" Built-In VS External")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ echo 'Echoed with a built-in!'\nEchoed with a built-in!\n$ /bin/echo 'Echoed with external program!'\nEchoed with external program!\n\n# type command will return what type of command it is (built-in vs external)\n$ type echo\necho is a shell builtin\n$ type ls\nls is hashed (/bin/ls)\n")])])]),a("h2",{attrs:{id:"links"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#links","aria-hidden":"true"}},[t._v("#")]),t._v(" Links")]),t._v(" "),a("p",[t._v("Use "),a("code",[t._v("-f")]),t._v(" to force overwrite\n"),a("code",[t._v("ln -s source_file target_file # -s is for symbolic")])]),t._v(" "),a("h2",{attrs:{id:"brace-expansion"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#brace-expansion","aria-hidden":"true"}},[t._v("#")]),t._v(" Brace Expansion")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("one,two,red,blue"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("fish\nonefish twofish redfish bluefish\n\n$ "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" fish"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("one,two,red,blue"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nfishone fishtwo fishred fishblue\n\n$ "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" fi"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("one,two,red,blue"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("sh\nfionesh fitwosh firedsh fibluesh\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" foo"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("1,2,3"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".txt "),a("span",{attrs:{class:"token comment"}},[t._v("# Output: foo1.txt foo2.txt foo3.txt")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("cp")]),t._v(" -v file1.txt"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(",.bak"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("# Output: file1.txt -> file1.txt.bak")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" file"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("d"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(".txt    "),a("span",{attrs:{class:"token comment"}},[t._v("# Output: filea.txt fileb.txt filec.txt filed.txt")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" -p /apache-jail/"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("usr,bin,lib64,dev"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("# Make multiple dirs")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("mv")]),t._v(" file."),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("txt,doc"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("# Rename file.txt to file.doc")]),t._v("\n")])])]),a("h2",{attrs:{id:"permissions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#permissions","aria-hidden":"true"}},[t._v("#")]),t._v(" Permissions")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("find")]),t._v(" /home/user -type d -print0 "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -0 "),a("span",{attrs:{class:"token function"}},[t._v("chmod")]),t._v(" 0775\n"),a("span",{attrs:{class:"token function"}},[t._v("find")]),t._v(" /home/user -type f -print0 "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("xargs")]),t._v(" -0 "),a("span",{attrs:{class:"token function"}},[t._v("chmod")]),t._v(" 0664\n")])])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# Permissions:")]),t._v("\n1 – "),a("span",{attrs:{class:"token string"}},[t._v('"can execute"')]),t._v("\n2 – "),a("span",{attrs:{class:"token string"}},[t._v('"can write"')]),t._v("\n4 – "),a("span",{attrs:{class:"token string"}},[t._v('"can read"')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Examples:")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("chmod")]),t._v(" 600 "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" – owner can "),a("span",{attrs:{class:"token function"}},[t._v("read")]),t._v(" and "),a("span",{attrs:{class:"token function"}},[t._v("write")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("chmod")]),t._v(" 700 "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" – owner can read, "),a("span",{attrs:{class:"token function"}},[t._v("write")]),t._v(" and execute\n"),a("span",{attrs:{class:"token function"}},[t._v("chmod")]),t._v(" 666 "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" – all can "),a("span",{attrs:{class:"token function"}},[t._v("read")]),t._v(" and "),a("span",{attrs:{class:"token function"}},[t._v("write")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("chmod")]),t._v(" 777 "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" – all can read, "),a("span",{attrs:{class:"token function"}},[t._v("write")]),t._v(" and execute\n")])])]),a("h2",{attrs:{id:"command-substitution"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#command-substitution","aria-hidden":"true"}},[t._v("#")]),t._v(" Command Substitution")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("$ date +%d-%b-%Y\n12-Mar-2004\n\n$ today=$(date +%d-%b-%Y)\n\n$ echo $today\n12-Mar-2004\n\n# listing of all the files from all the RPM packages that have httpd in the name\n$ rpm -ql $(rpm -qa | grep httpd)\n\n# Star will substitue for all files\n$ for file in * ; do cp $file $file.bak; done\n")])])])])}],!1,null,null,null);e.options.__file="bash_shell.md";s.default=e.exports}}]);