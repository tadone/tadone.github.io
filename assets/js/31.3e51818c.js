(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{196:function(e,s,a){"use strict";a.r(s);var t=a(0),r=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"cpu-load"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-load","aria-hidden":"true"}},[e._v("#")]),e._v(" CPU Load")]),e._v(" "),a("p",[a("strong",[e._v("Uptime Load Averges")]),e._v("\nThe sum of "),a("em",[e._v("number of processes")]),e._v(" that are currently running plus the number that are "),a("em",[e._v("waiting")]),e._v(".On multi-processor system, the load is relative to the number of processor cores available. The “100% utilization” mark is 1.00 on a single-core system, 2.00, on a dual-core, 4.00 on a quad-core, etc.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("uptime")]),e._v("                          "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Display load averages in 1, 5, 15 minutes based on number of cores/processors")]),e._v("\n")])])]),a("p",[e._v("Good Article explaining this: http://blog.scoutapp.com/articles/2009/07/31/understanding-load-averages")]),e._v(" "),a("p",[a("strong",[e._v("top")])]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Physical memory usage stats:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("Mem:   4051792k total,  4026104k used,    25688k free,   359168k buffers\n")])])]),a("p",[e._v("Memory stats line gives you a summary of how much physical memory you have on your system, and how much of it is currently used or available for the use.\nModern Linux systems are buffering quite a lot for improved performance, which means you rarely get to see all your physical RAM free – the more your system stays up and running, the more of its recently used data ends up being buffered.")])]),e._v(" "),a("li",[a("p",[e._v("CPU(s) status")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("Cpu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(":  0.6%us,  0.5%sy,  0.0%ni, 97.3%id,  1.6%wa,  0.0%hi,  0.0%si,  0.0%st\n")])])]),a("p",[e._v("Current CPU state, averaged for the number of CPUs installed in your system\n"),a("code",[e._v("us")]),e._v(" – User CPU time. The time the CPU has spent running users’ processes with default priorities\n"),a("code",[e._v("sy")]),e._v(" – System CPU time. The time the CPU has spent running the kernel and its processes\n"),a("code",[e._v("ni")]),e._v(" – Nice CPU time. The time the CPU has spent running users’ proccess that have been prioritized up using nice command\n"),a("code",[e._v("id")]),e._v(" – Idle CPU time\n"),a("code",[e._v("wa")]),e._v(" – I/O wait. Amount of time the CPU has been waiting for I/O operations to complete\n"),a("code",[e._v("hi")]),e._v(" – Hardware IRQ. The amount of time the CPU has been servicing hardware interrupts\n"),a("code",[e._v("si")]),e._v(" – Software Interrupts. The amount of time the CPU has been servicing software interrupts\n"),a("code",[e._v("st")]),e._v(" – Steal Time. The amount of CPU ’stolen’ from this virtual machine by the hypervisor for other tasks (such as running another virtual machine)")])]),e._v(" "),a("li",[a("p",[e._v("List of the tasks (processes) running on your system")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("PID  USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n7629 greys     20   0  749m 291m  28m S    1  7.4  16:51.40 firefox\n")])])]),a("p",[a("code",[e._v("PID")]),e._v(" – process ID\n"),a("code",[e._v("USER")]),e._v(" – username for the owner of each process\n"),a("code",[e._v("PR")]),e._v(" – process priority (RT means a Real Time priority class – used for system processes)\n"),a("code",[e._v("NI")]),e._v(" – priority set by nice utility\n"),a("code",[e._v("VIRT")]),e._v(" – the amount of virtual memory used by a process: code, data and shared libraries plus pages that have been swapped out\n"),a("code",[e._v("RES")]),e._v(" – the resident part of a process – how much of it resides in the physical memory (non-swapped memory)\n"),a("code",[e._v("SHR")]),e._v(" – shows you the size of potentially shared memory segments for a process\n"),a("code",[e._v("S")]),e._v(" – the current state of each process\n"),a("code",[e._v("%CPU")]),e._v(" – percentage of the time shares CPU spends running a particular process\n"),a("code",[e._v("%MEM")]),e._v(" – percentage of the physical memory of your system which is used by each process\n"),a("code",[e._v("%TIME+")]),e._v(" – total time CPUs spent running each process\n"),a("code",[e._v("COMMAND")]),e._v(" – a command used to initiate each process.")])])]),e._v(" "),a("hr"),e._v(" "),a("h2",{attrs:{id:"disk-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-usage","aria-hidden":"true"}},[e._v("#")]),e._v(" Disk Usage")]),e._v(" "),a("p",[a("strong",[e._v("df")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("df")]),e._v(" -hT           "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Show info on file system -h human readable and -T type of file system")]),e._v("\n")])])]),a("p",[a("strong",[e._v("du")])]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("du")]),e._v(" -Sh /home "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sort")]),e._v(" -rh "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("head")]),e._v(" -5       "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Display the largest folders/files including the sub-directories")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Perl hack: To display large files with stars")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("du")]),e._v(" -k "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sort")]),e._v(" -rn "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("head")]),e._v(" -10 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" perl -ne "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'if ( /^(\\d+)\\s+(.*$)/){"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$l")]),e._v("=log("),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v("+.1);"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$m")]),e._v("=int("),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$l")]),e._v('/log(1024)); printf  ("%6.1f\\t%s\\t%25s  %s\\n",('),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$1")]),e._v("/(2**(10*"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$m")]),e._v('))),(("K","M","G","T","P")['),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$m")]),e._v(']),"*"x (1.5*'),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$l")]),e._v("),"),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$2")]),e._v(");}'")]),e._v("\n")])])]),a("p",[a("strong",[e._v("find")]),e._v("\nFind file over certain size")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("find")]),e._v(" /home -type f -size +10000k -exec "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -lh "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" \\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{ print "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$5")]),e._v(' ": " '),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$9")]),e._v(" }'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("sort")]),e._v(" -nr "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("head")]),e._v(" -10\n")])])]),a("hr"),e._v(" "),a("h2",{attrs:{id:"memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory","aria-hidden":"true"}},[e._v("#")]),e._v(" Memory")]),e._v(" "),a("p",[a("strong",[e._v("free")]),e._v("\nShow available memory. Modern Linux use "),a("code",[e._v("cache")]),e._v(" and buffering to improve performance. Linux counts "),a("code",[e._v("cached")]),e._v(" RAM, Buffered RAM to used RAM. "),a("code",[e._v("Buffers")]),e._v(" represent how much portion of RAM is dedicated to cache disk blocks. "),a("code",[e._v("Cached")]),e._v(" is similar like "),a("code",[e._v("Buffers")]),e._v(", only this time it caches pages from file reading.")]),e._v(" "),a("p",[a("code",[e._v("Buffers")]),e._v(" are associated with a specific block device, and cover caching of filesystem metadata as well as tracking in-flight pages. The "),a("code",[e._v("cache")]),e._v(" only contains parked file data. That is, the "),a("code",[e._v("buffers")]),e._v(" remember what's in directories, what file permissions are, and keep track of what memory is being written from or read to for a particular block device. The "),a("code",[e._v("cache")]),e._v(" only contains the contents of the files themselves.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v(" -wh\n              total        used        "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("free")]),e._v("      shared     buffers       cache   available\nMem:            15G        7.7G        4.8G        154M        484M        2.6G        7.3G\nSwap:          7.9G          0B        7.9G\n\n")])])]),a("h2",{attrs:{id:"network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network","aria-hidden":"true"}},[e._v("#")]),e._v(" Network")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("netstat")]),e._v(" -tulpn                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Find services listening")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("netstat")]),e._v(" -tulpn "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" :80           "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Find services listening on a port 80")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("fuser")]),e._v(" 7000/tcp                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Find out the processes PID that opened tcp port 7000")]),e._v("\n")])])]),a("h2",{attrs:{id:"stress-testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stress-testing","aria-hidden":"true"}},[e._v("#")]),e._v(" Stress Testing")]),e._v(" "),a("h3",{attrs:{id:"cpu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu","aria-hidden":"true"}},[e._v("#")]),e._v(" CPU")]),e._v(" "),a("p",[e._v("Fork "),a("code",[e._v("md5sum")]),e._v(" 4 times (to use up 4 cores) for 5 seconds")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Mostly userland cpu load")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("seq")]),e._v(" 4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("xargs")]),e._v(" -P0 -n1 "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v(" 5 md5sum /dev/zero\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# High kernel (sys) load from the many write() system calls")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("seq")]),e._v(" 4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("xargs")]),e._v(" -P0 -n1 "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("timeout")]),e._v(" 5 "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("yes")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" /dev/null\n")])])])])}],!1,null,null,null);s.default=r.exports}}]);