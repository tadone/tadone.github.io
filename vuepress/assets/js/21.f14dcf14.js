(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{164:function(s,e,a){"use strict";a.r(e);var t=a(0),n=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"linux-metrics"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linux-metrics","aria-hidden":"true"}},[s._v("#")]),s._v(" Linux Metrics")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"cpu-load"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cpu-load","aria-hidden":"true"}},[s._v("#")]),s._v(" CPU Load")]),s._v(" "),a("p",[a("strong",[s._v("Uptime Load Averges")]),s._v("\nThe sum of "),a("em",[s._v("number of processes")]),s._v(" that are currently running plus the number that are "),a("em",[s._v("waiting")]),s._v(".On multi-processor system, the load is relative to the number of processor cores available. The “100% utilization” mark is 1.00 on a single-core system, 2.00, on a dual-core, 4.00 on a quad-core, etc.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("uptime")]),s._v("                          "),a("span",{attrs:{class:"token comment"}},[s._v("# Display load averages in 1, 5, 15 minutes based on number of cores/processors")]),s._v("\n")])])]),a("p",[s._v("Good Article explaining this: http://blog.scoutapp.com/articles/2009/07/31/understanding-load-averages")]),s._v(" "),a("p",[a("strong",[s._v("top")])]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Physical memory usage stats:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("Mem:   4051792k total,  4026104k used,    25688k free,   359168k buffers\n")])])]),a("p",[s._v("Memory stats line gives you a summary of how much physical memory you have on your system, and how much of it is currently used or available for the use.\nModern Linux systems are buffering quite a lot for improved performance, which means you rarely get to see all your physical RAM free – the more your system stays up and running, the more of its recently used data ends up being buffered.")])]),s._v(" "),a("li",[a("p",[s._v("CPU(s) status")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("Cpu"),a("span",{attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{attrs:{class:"token punctuation"}},[s._v(")")]),s._v(":  0.6%us,  0.5%sy,  0.0%ni, 97.3%id,  1.6%wa,  0.0%hi,  0.0%si,  0.0%st\n")])])]),a("p",[s._v("Current CPU state, averaged for the number of CPUs installed in your system\n"),a("code",[s._v("us")]),s._v(" – User CPU time. The time the CPU has spent running users’ processes with default priorities\n"),a("code",[s._v("sy")]),s._v(" – System CPU time. The time the CPU has spent running the kernel and its processes\n"),a("code",[s._v("ni")]),s._v(" – Nice CPU time. The time the CPU has spent running users’ proccess that have been prioritized up using nice command\n"),a("code",[s._v("id")]),s._v(" – Idle CPU time\n"),a("code",[s._v("wa")]),s._v(" – I/O wait. Amount of time the CPU has been waiting for I/O operations to complete\n"),a("code",[s._v("hi")]),s._v(" – Hardware IRQ. The amount of time the CPU has been servicing hardware interrupts\n"),a("code",[s._v("si")]),s._v(" – Software Interrupts. The amount of time the CPU has been servicing software interrupts\n"),a("code",[s._v("st")]),s._v(" – Steal Time. The amount of CPU ’stolen’ from this virtual machine by the hypervisor for other tasks (such as running another virtual machine)")])]),s._v(" "),a("li",[a("p",[s._v("List of the tasks (processes) running on your system")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("PID  USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n7629 greys     20   0  749m 291m  28m S    1  7.4  16:51.40 firefox\n")])])]),a("p",[a("code",[s._v("PID")]),s._v(" – process ID\n"),a("code",[s._v("USER")]),s._v(" – username for the owner of each process\n"),a("code",[s._v("PR")]),s._v(" – process priority (RT means a Real Time priority class – used for system processes)\n"),a("code",[s._v("NI")]),s._v(" – priority set by nice utility\n"),a("code",[s._v("VIRT")]),s._v(" – the amount of virtual memory used by a process: code, data and shared libraries plus pages that have been swapped out\n"),a("code",[s._v("RES")]),s._v(" – the resident part of a process – how much of it resides in the physical memory (non-swapped memory)\n"),a("code",[s._v("SHR")]),s._v(" – shows you the size of potentially shared memory segments for a process\n"),a("code",[s._v("S")]),s._v(" – the current state of each process\n"),a("code",[s._v("%CPU")]),s._v(" – percentage of the time shares CPU spends running a particular process\n"),a("code",[s._v("%MEM")]),s._v(" – percentage of the physical memory of your system which is used by each process\n"),a("code",[s._v("%TIME+")]),s._v(" – total time CPUs spent running each process\n"),a("code",[s._v("COMMAND")]),s._v(" – a command used to initiate each process.")])])]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"disk-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#disk-usage","aria-hidden":"true"}},[s._v("#")]),s._v(" Disk Usage")]),s._v(" "),a("p",[a("strong",[s._v("df")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("df")]),s._v(" -hT           "),a("span",{attrs:{class:"token comment"}},[s._v("# Show info on file system -h human readable and -T type of file system")]),s._v("\n")])])]),a("p",[a("strong",[s._v("du")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("du")]),s._v(" -Sh /home "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("sort")]),s._v(" -rh "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("head")]),s._v(" -5       "),a("span",{attrs:{class:"token comment"}},[s._v("# Display the largest folders/files including the sub-directories")]),s._v("\n"),a("span",{attrs:{class:"token comment"}},[s._v("# Perl hack: To display large files with stars")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("du")]),s._v(" -k "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("sort")]),s._v(" -rn "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("head")]),s._v(" -10 "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" perl -ne "),a("span",{attrs:{class:"token string"}},[s._v("'if ( /^(\\d+)\\s+(.*$)/){"),a("span",{attrs:{class:"token variable"}},[s._v("$l")]),s._v("=log("),a("span",{attrs:{class:"token variable"}},[s._v("$1")]),s._v("+.1);"),a("span",{attrs:{class:"token variable"}},[s._v("$m")]),s._v("=int("),a("span",{attrs:{class:"token variable"}},[s._v("$l")]),s._v('/log(1024)); printf  ("%6.1f\\t%s\\t%25s  %s\\n",('),a("span",{attrs:{class:"token variable"}},[s._v("$1")]),s._v("/(2**(10*"),a("span",{attrs:{class:"token variable"}},[s._v("$m")]),s._v('))),(("K","M","G","T","P")['),a("span",{attrs:{class:"token variable"}},[s._v("$m")]),s._v(']),"*"x (1.5*'),a("span",{attrs:{class:"token variable"}},[s._v("$l")]),s._v("),"),a("span",{attrs:{class:"token variable"}},[s._v("$2")]),s._v(");}'")]),s._v("\n")])])]),a("p",[a("strong",[s._v("find")]),s._v("\nFind file over certain size")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("find")]),s._v(" /home -type f -size +10000k -exec "),a("span",{attrs:{class:"token function"}},[s._v("ls")]),s._v(" -lh "),a("span",{attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \\"),a("span",{attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),a("span",{attrs:{class:"token string"}},[s._v("'{ print "),a("span",{attrs:{class:"token variable"}},[s._v("$5")]),s._v(' ": " '),a("span",{attrs:{class:"token variable"}},[s._v("$9")]),s._v(" }'")]),s._v(" "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("sort")]),s._v(" -nr "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("head")]),s._v(" -10\n")])])]),a("hr"),s._v(" "),a("h2",{attrs:{id:"memory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory","aria-hidden":"true"}},[s._v("#")]),s._v(" Memory")]),s._v(" "),a("p",[a("strong",[s._v("free")]),s._v("\nShow available memory. Modern Linux use cache and buffering to improve performance. Linux counts cached RAM, Buffered RAM to used RAM.")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("free")]),s._v(" -wh\n              total        used        "),a("span",{attrs:{class:"token function"}},[s._v("free")]),s._v("      shared     buffers       cache   available\nMem:            15G        7.7G        4.8G        154M        484M        2.6G        7.3G\nSwap:          7.9G          0B        7.9G\n\n")])])]),a("h2",{attrs:{id:"network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network","aria-hidden":"true"}},[s._v("#")]),s._v(" Network")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[s._v("netstat")]),s._v(" -tulpn                      "),a("span",{attrs:{class:"token comment"}},[s._v("# Find services listening")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("netstat")]),s._v(" -tulpn "),a("span",{attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{attrs:{class:"token function"}},[s._v("grep")]),s._v(" :80           "),a("span",{attrs:{class:"token comment"}},[s._v("# Find services listening on a port 80")]),s._v("\n"),a("span",{attrs:{class:"token function"}},[s._v("fuser")]),s._v(" 7000/tcp                      "),a("span",{attrs:{class:"token comment"}},[s._v("# Find out the processes PID that opened tcp port 7000")]),s._v("\n")])])])])}],!1,null,null,null);n.options.__file="linux_metrics.md";e.default=n.exports}}]);