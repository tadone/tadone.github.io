(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{163:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"bash-scripting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bash-scripting","aria-hidden":"true"}},[t._v("#")]),t._v(" Bash Scripting")]),t._v(" "),a("h2",{attrs:{id:"tips-n-tricks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips-n-tricks","aria-hidden":"true"}},[t._v("#")]),t._v(" Tips n Tricks")]),t._v(" "),a("h4",{attrs:{id:"ansi-colors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ansi-colors","aria-hidden":"true"}},[t._v("#")]),t._v(" ANSI Colors")]),t._v(" "),a("p",[t._v("The shell output can be colorized via ANSI escape codes\nRequires Bash v4 and use of "),a("code",[t._v("printf")]),t._v(" or "),a("code",[t._v("echo -e")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# COLORS")]),t._v("\nBLACK"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[30m"')]),t._v("\nRED"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[31m"')]),t._v("\nGREEN"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[32m"')]),t._v("\nYELLOW"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[33m"')]),t._v("\nBLUE"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[34m"')]),t._v("\nMAGENTA"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[35m"')]),t._v("\nCYAN"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[36m"')]),t._v("\nWHITE"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[37m"')]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# RESET")]),t._v("\nRESET "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[0m"')]),t._v("                 "),a("span",{attrs:{class:"token comment"}},[t._v("# Reset the colors")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# DECORATORS")]),t._v("\nBOLD"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[1m"')]),t._v("\nUNDERLINE"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[4m"')]),t._v("\nREVERSED"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[7m"')]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" -e "),a("span",{attrs:{class:"token string"}},[t._v('"\\u001b[31mHello"')]),t._v("           "),a("span",{attrs:{class:"token comment"}},[t._v("# Prints Hello in red")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" -e "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("${BLACK}")]),t._v("Hello"),a("span",{attrs:{class:"token variable"}},[t._v("${RESET}")]),t._v('"')]),t._v("     "),a("span",{attrs:{class:"token comment"}},[t._v("# Prints Hello in black and resets back")]),t._v("\n")])])]),a("h2",{attrs:{id:"special-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#special-variables","aria-hidden":"true"}},[t._v("#")]),t._v(" Special Variables")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Variable")]),t._v(" "),a("th",[t._v("What it means")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("$0")])]),t._v(" "),a("td",[t._v("The name of the Bash script")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$1-$9")])]),t._v(" "),a("td",[t._v("1-9 Positional arguments to the script")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$#")])]),t._v(" "),a("td",[t._v("How many arguments were passed to the Bash script")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$@")])]),t._v(" "),a("td",[t._v("All the arguments supplied to the Bash script")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$?")])]),t._v(" "),a("td",[t._v("The "),a("strong",[t._v("exit status")]),t._v(" of the most recently run process")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$$")])]),t._v(" "),a("td",[t._v("The process ID of the current script")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$USER")])]),t._v(" "),a("td",[t._v("The username of the user running the script")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$HOSTNAME")])]),t._v(" "),a("td",[t._v("The hostname of the machine the script is running on")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$SECONDS")])]),t._v(" "),a("td",[t._v("The number of seconds since the script was started")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$RANDOM")])]),t._v(" "),a("td",[t._v("Returns a different random number each time is it referred to")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("$LINENO")])]),t._v(" "),a("td",[t._v("Returns the current line number in the Bash script")])])])]),t._v(" "),a("h2",{attrs:{id:"script-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script-options","aria-hidden":"true"}},[t._v("#")]),t._v(" Script Options")]),t._v(" "),a("p",[t._v("Use "),a("code",[t._v("set -")]),t._v(" to enable option and "),a("code",[t._v("set +")]),t._v(" to disable")]),t._v(" "),a("p",[a("code",[t._v("set -e")]),t._v(" - Causes the shell to exit if any subcommand or pipeline returns a non-zero status."),a("br"),t._v(" "),a("code",[t._v("set -x")]),t._v(" - Enables a mode of the shell where all executed commands are printed to the terminal"),a("br"),t._v(" "),a("code",[t._v("set +x")]),t._v(" - Disables debug mode")]),t._v(" "),a("h2",{attrs:{id:"read-input"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-input","aria-hidden":"true"}},[t._v("#")]),t._v(" Read Input")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token shebang important"}},[t._v("#!/bin/bash")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Ask the user for login details")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("read")]),t._v(" -p "),a("span",{attrs:{class:"token string"}},[t._v("'Username: '")]),t._v(" uservar            "),a("span",{attrs:{class:"token comment"}},[t._v("# -p prompt")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("read")]),t._v(" -sp "),a("span",{attrs:{class:"token string"}},[t._v("'Password: '")]),t._v(" passvar           "),a("span",{attrs:{class:"token comment"}},[t._v("# -s silent")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" Thankyou "),a("span",{attrs:{class:"token variable"}},[t._v("$uservar")]),t._v(" we now have your login details\n")])])]),a("h2",{attrs:{id:"if-statement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#if-statement","aria-hidden":"true"}},[t._v("#")]),t._v(" If Statement")]),t._v(" "),a("p",[t._v("The square brackets "),a("strong",[t._v("[ ]")]),t._v(" in the if statement above are actually a reference to the command "),a("strong",[t._v("test")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("some test"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("commands"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n")])])]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("some test"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("commands"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("some test"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("then")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("different commands"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("other commands"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("fi")]),t._v("\n")])])]),a("p",[a("code",[t._v("&&")]),t._v(" - Perform the "),a("strong",[t._v("AND")]),t._v(" operation.")]),t._v(" "),a("p",[a("code",[t._v("||")]),t._v(" - Perform the "),a("strong",[t._v("OR")]),t._v(" operation.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"right"}},[t._v("Operator")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("! EXPRESSION")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("The EXPRESSION is false.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-n STRING")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("The length of STRING is greater than zero.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-z STRING")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("The lengh of STRING is zero (ie it is empty).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("STRING1 = STRING2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("STRING1 is equal to STRING2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("STRING1 != STRING2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("STRING1 is not equal to STRING2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("INTEGER1 -eq INTEGER2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("INTEGER1 is numerically equal to INTEGER2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("INTEGER1 -gt INTEGER2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("INTEGER1 is numerically greater than INTEGER2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("INTEGER1 -lt INTEGER2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("INTEGER1 is numerically less than INTEGER2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-d FILE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FILE exists and is a directory.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-e FILE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FILE exists.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-r FILE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FILE exists and the read permission is granted.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-s FILE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FILE exists and it's size is greater than zero (ie. it is not empty).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-w FILE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FILE exists and the write permission is granted.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"right"}},[t._v("-x FILE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("FILE exists and the execute permission is granted.")])])])]),t._v(" "),a("p",[t._v("Most Common Uses of Tests")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('if  [ -z "$VAR1" ];  # This will return true if a variable is unset or set to the empty string ("")\nif  [ -n "$VAR1" ];  # the inverse of -z\nif  [ ! -d "$DIR" ]; # Test if directory $DIR (does not !) exist(s)\n')])])]),a("h2",{attrs:{id:"loops"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#loops","aria-hidden":"true"}},[t._v("#")]),t._v(" Loops")]),t._v(" "),a("p",[a("code",[t._v("break")]),t._v(" - Exit the currently running loop.")]),t._v(" "),a("p",[a("code",[t._v("continue")]),t._v(" - Stop this iteration of the loop and begin the next iteration.")]),t._v(" "),a("h3",{attrs:{id:"while-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-loop","aria-hidden":"true"}},[t._v("#")]),t._v(" While Loop")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# Basic while loop")]),t._v("\ncounter"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("1\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$counter")]),t._v(" -le 10 "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("       "),a("span",{attrs:{class:"token comment"}},[t._v("# While conter is less then 10")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$counter")]),t._v("\n    "),a("span",{attrs:{class:"token variable"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("((")]),t._v("counter"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("               "),a("span",{attrs:{class:"token comment"}},[t._v("# Increment counter with each loop")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("read")]),t._v(" url\n"),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    youtube-dl "),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(". "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$url")]),t._v('"')]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Single Line While Loop")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("date")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("sleep")]),t._v(" 1"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("h3",{attrs:{id:"until-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#until-loop","aria-hidden":"true"}},[t._v("#")]),t._v(" Until Loop")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# Basic until loop")]),t._v("\ncounter"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("1\n"),a("span",{attrs:{class:"token keyword"}},[t._v("until")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$counter")]),t._v(" -gt 10 "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$counter")]),t._v("\n    "),a("span",{attrs:{class:"token variable"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("((")]),t._v("counter"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v("))")])]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("h3",{attrs:{id:"for-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-loop","aria-hidden":"true"}},[t._v("#")]),t._v(" For Loop")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# Basic for loop")]),t._v("\nnames"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v("'Stan Kyle Cartman'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" name "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$names")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$name")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("h3",{attrs:{id:"for-loop-in-range"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-loop-in-range","aria-hidden":"true"}},[t._v("#")]),t._v(" For Loop in Range")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" value "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("1"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("5"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$value")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n")])])]),a("hr"),t._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions","aria-hidden":"true"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("function_name "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("commands"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Pass Argument to Function")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("print_something "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" Hello "),a("span",{attrs:{class:"token variable"}},[t._v("$1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nprint_something Mars                "),a("span",{attrs:{class:"token comment"}},[t._v("# OUTPUT: Hello Mars")]),t._v("\nprint_something Jupiter             "),a("span",{attrs:{class:"token comment"}},[t._v("# OUTPUT: Hello Jupiter")]),t._v("\n")])])]),a("h2",{attrs:{id:"arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays","aria-hidden":"true"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),a("p",[a("strong",[t._v("Creating Arrays")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("names"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Peter"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$USER")]),t._v('"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Big Bad John"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nphotos"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("~/"),a("span",{attrs:{class:"token string"}},[t._v('"My Photos"')]),t._v("/*.jpg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nfiles"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token variable"}},[a("span",{attrs:{class:"token variable"}},[t._v("$(")]),a("span",{attrs:{class:"token function"}},[t._v("ls")]),a("span",{attrs:{class:"token variable"}},[t._v(")")])]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("# BAD, BAD, BAD!")]),t._v("\nfiles"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("*"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),a("span",{attrs:{class:"token comment"}},[t._v("# Good!")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Using Arrays")]),t._v("\nThe syntax "),a("code",[t._v('"${myfiles[@]}"')]),t._v(" is extremely important. It works just like "),a("code",[t._v('"$@"')]),t._v(" does for the positional parameters: it expands to a list of words, with each array element as one word, no matter what it contains. Even if there are spaces, tabs, newlines, quotation marks, or any other kind of characters in one of the array elements, it'll still be passed along as one word to whichever command we're running.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("# FOR LOOP")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("file")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("${myfiles[@]}")]),t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$file")]),t._v('"')]),t._v(" /backups/\n"),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# SINGLE LINE")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("${arr[@]}")]),t._v('"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("do")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token variable"}},[t._v("$i")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("done")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("# STRAIGHT COPY")]),t._v("\nmyfiles"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("db.sql home.tbz2 etc.tbz2"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("${myfiles[@]}")]),t._v('"')]),t._v(" /backups/\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# POS IN ARRAY")]),t._v("\nnames"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Bob"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Peter"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$USER")]),t._v('"')]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"Big Bad John"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("        "),a("span",{attrs:{class:"token comment"}},[t._v("# Create an array")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("declare")]),t._v(" -p names                                    "),a("span",{attrs:{class:"token comment"}},[t._v("# Print contents of a variable with the type")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"The first name is: '),a("span",{attrs:{class:"token variable"}},[t._v("${names[0]}")]),t._v('"')]),t._v("               "),a("span",{attrs:{class:"token comment"}},[t._v("# Access 1st item in the array")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"The second name is: '),a("span",{attrs:{class:"token variable"}},[t._v("${names[1]}")]),t._v('"')]),t._v("              "),a("span",{attrs:{class:"token comment"}},[t._v("# Access 2nd item in the array")]),t._v("\n")])])]),a("h2",{attrs:{id:"heredoc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#heredoc","aria-hidden":"true"}},[t._v("#")]),t._v(" Heredoc")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" EOF "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/yourfilehere\nThese contents will be written to the file.\n        This line is indented.\nEOF\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("# PREVENT VARIABLE EXPANSION")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("cat")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'EOF'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" /tmp/yourfilehere\nThe variable "),a("span",{attrs:{class:"token variable"}},[t._v("$FOO")]),t._v(" will not be interpreted.\nEOF\n")])])]),a("h2",{attrs:{id:"subshell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#subshell","aria-hidden":"true"}},[t._v("#")]),t._v(" Subshell")]),t._v(" "),a("p",[t._v("A subshell is a child process that inherits more than a normal external command does. It can see all the variables of your script, not just the ones that have been exported to the environment.\n"),a("strong",[t._v("To force a command to run in subshell use parentheses")]),t._v(" "),a("code",[t._v("()")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("foo"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("old\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("bar"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"'),a("span",{attrs:{class:"token variable"}},[t._v("$foo")]),t._v('"')]),t._v("                "),a("span",{attrs:{class:"token comment"}},[t._v("# Output: old")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cd /foo "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("exit")]),t._v(" 1"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("tar")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"debugging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging","aria-hidden":"true"}},[t._v("#")]),t._v(" Debugging")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("bash")]),t._v(" -x ./mybrokenscript\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("#!/bin/bash -x")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v(" script "),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("#!/usr/bin/env bash")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" -x\n")])])]),a("p",[t._v("Add set -x somewhere in your code to turn on this mode for only a specific block of your code:")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("#!/usr/bin/env bash")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("irrelevant code"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" -x\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("relevant code"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" +x\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),t._v("irrelevant code"),a("span",{attrs:{class:"token punctuation"}},[t._v("..")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])])}],!1,null,null,null);e.options.__file="bash.md";s.default=e.exports}}]);